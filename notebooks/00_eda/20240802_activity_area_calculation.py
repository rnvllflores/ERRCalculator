# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.16.0
#   kernelspec:
#     display_name: onebase
#     language: python
#     name: python3
# ---

# %%
# Standard Imports
import sys
import geopandas as gpd
from geowrangler.validation import GeometryValidation

# Google Cloud Imports

# %%
# Util imports
sys.path.append("../../")  # include parent directory
from src.settings import GEOJSON_DATA_DIR, PARQUET_DATA_DIR, GPKG_DATA_DIR
from src.duckdb_utils import create_default_connection

# %%
# Variables
SILUP_DIR = GEOJSON_DATA_DIR / "SILUP"
STRATA_DIR = PARQUET_DATA_DIR / "pre-strata"

# GCS Variables
STRATA_GCS_DIR = "gs://00_extract_vectors/"
SILUP_GCS_DIR = "gs://silup-gis/onebase/"

# BigQuery Variables
SRC_DATASET_ID = "biomass_inventory"
DATASET_ID = "carbon_stock"
IF_EXISTS = "replace"

# %% [markdown]
# # Load Data

# %% [markdown]
# ## Strata

# %%
# file_list = list(pathlib.Path(STRATA_DIR).glob('*'))

# %%
# dfs = [pd.read_parquet(file) for file in file_list]
# strata_df = pd.concat(dfs)

# %%
# strata_df.columns

# %%
# strata_dipterocarp = strata_df[strata_df['strata'].isin(['pre_strata_1','pre_strata_2','pre_strata_3'])]

# %%
# strata_gdf = gpd.GeoDataFrame(strata_dipterocarp, geometry=gpd.GeoSeries.from_wkt(strata_dipterocarp['geometry']), crs="EPSG:4326")

# %%
strata_gdf = gpd.read_file(
    GPKG_DATA_DIR / "pre_strata_dipterocarp_20240802.gpkg", driver="GPKG"
)

# %%
province = gpd.read_file(
    "/Users/renflores/Documents/OneBase/data/shp/admin1/geoBoundaries-PHL-ADM1.shp",
    driver="ESRI Shapefile",
)

# %%
caraga = province.loc[province["shapeISO"] == "PH-13"]

# %%
caraga_df = caraga.copy()

# %%
caraga_df["geometry"] = caraga_df["geometry"].to_wkt()

# %%
# strata_gdf = strata_gdf.sjoin(caraga, how='inner', predicate='intersects')

# %%
# strata_gdf = strata_gdf.explode(index_parts=False)

# %%
# strata_gdf.reset_index(drop=True, inplace=True)

# %%
# strata_gdf = strata_gdf[['lcc', 'strata', 'geometry']].copy()

# %%
# strata_gdf.to_crs("EPSG:3123", inplace=True)

# %%
# strata_gdf['geometry'] = strata_gdf.simplify(0.01)

# %%
# strata_gdf.to_crs("EPSG:4326", inplace=True)

# %%
# strata_gdf =  GeometryValidation(strata_gdf).validate_all()

# %% vscode={"languageId": "powershell"}
# subset_strata_gdf = strata_gdf[~strata_gdf.all(axis=1)]
# subset_strata_gdf.to_file(TMP_OUT_DIR / "subset_strata.gpkg", driver="GPKG")

# %%
# false_counts = subset_strata_gdf.apply(lambda x: (x == False).sum())

# %%
# false_counts

# %%
# strata_gdf['geometry'] = strata_gdf.buffer(0)

# %%
# strata_gdf.to_file(GPKG_DATA_DIR / "pre_strata_dipterocarp_20240802.gpkg", driver="GPKG")

# %%
strata_df = strata_gdf.copy()

# %%
strata_df["geometry"] = strata_df["geometry"].to_wkt()

# %%
strata_gdf.info()

# %%
strata_gdf.shape

# %%
strata_gdf = strata_gdf[strata_gdf.geometry.is_valid].copy()

# %%
strata_gdf.shape

# %%
strata_gdf.strata.value_counts()

# %%
# strata_df.to_gbq(f"strata.pre_strata_dipterocarp",
#         project_id=GCP_PROJ_ID,
#         if_exists="replace")

# %%
# query = f"""
#     SELECT
#         *EXCEPT(geometry),
#         ST_GEOGFROMTEXT(geometry,
#             oriented => FALSE,
#             make_valid => TRUE)
#     FROM {GCP_PROJ_ID}.strata.pre_strata_dipterocarp"""

# # Read the BigQuery table into a dataframe
# strata_df = pandas_gbq.read_gbq(query, project_id=GCP_PROJ_ID)
# plot_info.to_csv(PLOT_INFO_CSV, index=False)

# %% [markdown]
# ## Activity Areas -- file manually generated by kahlil

# %%
# activity_area_gdf = gpd.read_file(GPKG_DATA_DIR / "silup_optimized.gpkg")

# %%
# activity_area_gdf.head(2)

# %%
# activity_area_gdf = activity_area_gdf[['CADT',"ELI_TYPE","geometry"]].copy()

# %%
# activity_area_gdf['UID'] = activity_area_gdf.reset_index().apply(lambda row: f"{row['CADT']}_{row['ELI_TYPE']}_{row['index']}", axis=1)

# %%
# activity_area_gdf_val = GeometryValidation(activity_area_gdf).validate_all()

# %%
# activity_area_gdf = activity_area_gdf_val.dissolve(by=['CADT',"ELI_TYPE"]).reset_index()

# %%
activity_area_gdf = gpd.read_file(
    GPKG_DATA_DIR / "silup_optimized_validated.gpkg", driver="GPKG"
)

# %%
activity_area_gdf = activity_area_gdf.explode(index_parts=False)

# %%
activity_area_gdf = GeometryValidation(activity_area_gdf).validate_all()

# %%
activity_area_gdf[activity_area_gdf.geometry.is_valid]

# %%
activity_area_gdf["geometry"] = activity_area_gdf.buffer(0)

# %%
from shapely.geometry import Polygon


# %%
def polygon_z_to_2d(geom):
    if geom.has_z:
        return Polygon([(x, y) for x, y, z in geom.exterior.coords])
    return geom


# %%
# Apply the conversion to the GeoDataFrame
activity_area_gdf["geometry"] = activity_area_gdf["geometry"].apply(polygon_z_to_2d)

# %%
activity_area_df = activity_area_gdf.copy()

# %%
activity_area_df["geometry"] = activity_area_gdf["geometry"].to_wkt()

# %%
# activity_area_gdf.to_file(GPKG_DATA_DIR / "silup_optimized_validated.gpkg", driver="GPKG")

# %% [markdown]
# ## Initialize duckdb and load data

# %%
db = create_default_connection()

# %%
query = """ 
CREATE OR REPLACE TABLE strata_dipterocarp AS 
SELECT 
    strata, 
    lcc, 
    ST_GeomFromText(geometry) as geometry 
FROM 
    strata_df
"""

# %%
db.execute(query)

# %%
query = """
CREATE OR REPLACE TABLE activity_area AS 
SELECT 
    CADT, 
    ELI_TYPE, 
    ST_GeomFromText(geometry) as geometry FROM activity_area_df
"""

# %%
db.execute(query)

# %%
query = """
CREATE OR REPLACE TABLE caraga AS 
SELECT 
    *EXCLUDE(geometry),
    ST_GeomFromText(geometry) as geometry
FROM caraga_df
"""

# %%
db.execute(query)

# %%
query = "SELECT name FROM sqlite_master WHERE type='table';"
result = db.execute(query).df()

# %%
result

# %% [markdown]
# # Join activity data and strata

# %%
caraga_strata = "NULL"

# %%
query = """ CREATE OR REPLACE TABLE caraga_strata AS 
SELECT
    strata_dipterocarp.*
FROM strata_dipterocarp, 
    caraga 
WHERE ST_Intersects(strata_dipterocarp.geometry, caraga.geometry)"""

# %%
db.execute(query)

# %%
db.execute("EXPORT DATABASE 'strata.duckdb'")

# %%
query = """
SELECT 
    activity_area.CADT,
    activity_area.ELI_TYPE,
    caraga_strata.strata,
    ST_AsText(ST_Intersection(activity_area.geometry, caraga_strata.geometry)) as geometry
FROM activity_area
JOIN caraga_strata ON ST_Intersects(caraga_strata.geometry, activity_area.geometry)
WHERE activity_area.ELI_TYPE = 'APD'
"""

# %%
intersection = db.execute(query).df()

# %%
intersection_gdf = gpd.GeoDataFrame(
    intersection,
    geometry=gpd.GeoSeries.from_wkt(intersection["geometry"]),
    crs="EPSG:4326",
)

# %%
intersection_gdf

# %%
intersection_gdf.to_file(GPKG_DATA_DIR / "caraga_intersection.gpkg", driver="GPKG")

# %%
caraga_strata.to_file(GPKG_DATA_DIR / "caraga_strata.gpkg", driver="GPKG")

# %%
query = """ SELECT *EXCLUDE(geometry), ST_AsText(geometry) as geometry, ST_IsValid(geometry) AS is_valid FROM activity_area """

# %%
test = db.execute(query).df()

# %%
test[test.is_valid == 0]

# %%
db.execute(
    "UPDATE activity_area SET geometry = ST_MakeValid(geometry) WHERE NOT ST_IsValid(geometry);"
)

# %%
strata_gdf.loc[155961, "geometry"]
